{"version":3,"sources":["../../src/library/get-forced-case-fn.js"],"names":["getForcedCaseFn","rule","noop","input","config","Array","isArray","level","when","target","toUpperCase","charAt","substring","toLowerCase","TypeError"],"mappings":";;;;;;;;;;kBAWwBA,e;;AAXxB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;AAKe,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;AAC7C,OAAMC,OAAOC,SAASA,KAAtB;;AAEA,KAAI,CAACF,IAAL,EAAW;AACV,SAAOC,IAAP;AACA;;AAL4C,0CAO5BD,IAP4B;;AAAA,OAOtCG,MAPsC;;;AAS7C,KAAI,CAACC,MAAMC,OAAN,CAAcF,MAAd,CAAL,EAA4B;AAC3B,SAAOF,IAAP;AACA;;AAX4C,4CAa7BE,MAb6B;;AAAA,OAatCG,KAbsC;;;AAe7C,KAAIA,UAAU,CAAd,EAAiB;AAChB;AACA;;AAjB4C,6CAmB5BH,MAnB4B;;AAAA,OAmBpCI,IAnBoC;;;AAqB7C,KAAIA,SAAS,MAAb,EAAqB;AACpB;AACA;;AAvB4C,6CAyBxBJ,MAzBwB;;AAAA,OAyBlCK,MAzBkC;;;AA2B7C,KAAIJ,MAAMC,OAAN,CAAcG,MAAd,CAAJ,EAA2B;AAC1B,SAAOP,IAAP;AACA;;AAED,SAAQO,MAAR;AACC,OAAK,YAAL;AACC,UAAON,SAAS,sBAAUA,KAAV,CAAhB;AACD,OAAK,YAAL;AACC,UAAOA,SAAS,sBAAUA,KAAV,CAAhB;AACD,OAAK,YAAL;AACC,UAAOA,SAAS,sBAAUA,KAAV,CAAhB;AACD,OAAK,aAAL;AACC,UAAOA,SAAS,sBAAW,sBAAUA,KAAV,CAAX,CAAhB;AACD,OAAK,YAAL;AACC,UAAOA,SAAS,uBAAUA,KAAV,CAAhB;AACD,OAAK,YAAL;AACA,OAAK,WAAL;AACC,UAAOA,SAASA,MAAMO,WAAN,EAAhB;AACD,OAAK,eAAL;AACA,OAAK,cAAL;AACC,UAAOP,SACL,GAAEA,MAAMQ,MAAN,CAAa,CAAb,EAAgBD,WAAhB,EAA8B,GAAEP,MAAMS,SAAN,CAAgB,CAAhB,EAAmBC,WAAnB,EAAiC,EADrE;AAED,OAAK,YAAL;AACA,OAAK,WAAL;AACA,OAAK,WAAL;AAAkB;AACjB,UAAOV,SAASA,MAAMU,WAAN,OAAwBV,KAAxC;AACD;AACC,SAAM,IAAIW,SAAJ,CAAe,wBAAuBb,KAAK,CAAL,CAAQ,GAA9C,CAAN;AAvBF;AAyBA","file":"get-forced-case-fn.js","sourcesContent":["import camelCase from 'lodash.camelcase';\nimport kebabCase from 'lodash.kebabcase';\nimport snakeCase from 'lodash.snakecase';\nimport upperFirst from 'lodash.upperfirst';\nimport startCase from 'lodash.startcase';\n\n/**\n * Get forced case for rule\n * @param {object} rule to parse\n * @return {fn} transform function applying the enforced case\n */\nexport default function getForcedCaseFn(rule) {\n\tconst noop = input => input;\n\n\tif (!rule) {\n\t\treturn noop;\n\t}\n\n\tconst [config] = rule;\n\n\tif (!Array.isArray(config)) {\n\t\treturn noop;\n\t}\n\n\tconst [level] = config;\n\n\tif (level === 0) {\n\t\treturn;\n\t}\n\n\tconst [, when] = config;\n\n\tif (when === 'neve') {\n\t\treturn;\n\t}\n\n\tconst [, , target] = config;\n\n\tif (Array.isArray(target)) {\n\t\treturn noop;\n\t}\n\n\tswitch (target) {\n\t\tcase 'camel-case':\n\t\t\treturn input => camelCase(input);\n\t\tcase 'kebab-case':\n\t\t\treturn input => kebabCase(input);\n\t\tcase 'snake-case':\n\t\t\treturn input => snakeCase(input);\n\t\tcase 'pascal-case':\n\t\t\treturn input => upperFirst(camelCase(input));\n\t\tcase 'start-case':\n\t\t\treturn input => startCase(input);\n\t\tcase 'upper-case':\n\t\tcase 'uppercase':\n\t\t\treturn input => input.toUpperCase();\n\t\tcase 'sentence-case':\n\t\tcase 'sentencecase':\n\t\t\treturn input =>\n\t\t\t\t`${input.charAt(0).toUpperCase()}${input.substring(1).toLowerCase()}`;\n\t\tcase 'lower-case':\n\t\tcase 'lowercase':\n\t\tcase 'lowerCase': // Backwards compat config-angular v4\n\t\t\treturn input => input.toLowerCase() === input;\n\t\tdefault:\n\t\t\tthrow new TypeError(`Unknown target case \"${rule[2]}\"`);\n\t}\n}\n"]}