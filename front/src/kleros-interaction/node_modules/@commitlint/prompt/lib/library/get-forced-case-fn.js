'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

exports.default = getForcedCaseFn;

var _lodash = require('lodash.camelcase');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.kebabcase');

var _lodash4 = _interopRequireDefault(_lodash3);

var _lodash5 = require('lodash.snakecase');

var _lodash6 = _interopRequireDefault(_lodash5);

var _lodash7 = require('lodash.upperfirst');

var _lodash8 = _interopRequireDefault(_lodash7);

var _lodash9 = require('lodash.startcase');

var _lodash10 = _interopRequireDefault(_lodash9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Get forced case for rule
 * @param {object} rule to parse
 * @return {fn} transform function applying the enforced case
 */
function getForcedCaseFn(rule) {
	const noop = input => input;

	if (!rule) {
		return noop;
	}

	var _rule = (0, _slicedToArray3.default)(rule, 1);

	const config = _rule[0];


	if (!Array.isArray(config)) {
		return noop;
	}

	var _config = (0, _slicedToArray3.default)(config, 1);

	const level = _config[0];


	if (level === 0) {
		return;
	}

	var _config2 = (0, _slicedToArray3.default)(config, 2);

	const when = _config2[1];


	if (when === 'neve') {
		return;
	}

	var _config3 = (0, _slicedToArray3.default)(config, 3);

	const target = _config3[2];


	if (Array.isArray(target)) {
		return noop;
	}

	switch (target) {
		case 'camel-case':
			return input => (0, _lodash2.default)(input);
		case 'kebab-case':
			return input => (0, _lodash4.default)(input);
		case 'snake-case':
			return input => (0, _lodash6.default)(input);
		case 'pascal-case':
			return input => (0, _lodash8.default)((0, _lodash2.default)(input));
		case 'start-case':
			return input => (0, _lodash10.default)(input);
		case 'upper-case':
		case 'uppercase':
			return input => input.toUpperCase();
		case 'sentence-case':
		case 'sentencecase':
			return input => `${input.charAt(0).toUpperCase()}${input.substring(1).toLowerCase()}`;
		case 'lower-case':
		case 'lowercase':
		case 'lowerCase':
			// Backwards compat config-angular v4
			return input => input.toLowerCase() === input;
		default:
			throw new TypeError(`Unknown target case "${rule[2]}"`);
	}
}
module.exports = exports['default'];
//# sourceMappingURL=get-forced-case-fn.js.map